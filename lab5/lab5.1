#include<iostream>
using namespace std;
class Complex
{
private:
	double real;
	double img;
public:
	Complex(double r = 0, double i = 0);//конструктор	
	Complex& operator=(const Complex& right);//перегрузка оператора =
	friend const Complex &operator++(Complex& left);//перегрузка оператора ++(префикс)
	friend const Complex &operator--(Complex& left);//перегрузка оператора --(префикс)
	friend bool operator==(const Complex &left, const Complex &right);//перегрузка оператора ==
	friend ostream& operator<<(ostream& out, const Complex& c);//перегрузка оператора <<
	friend istream& operator>>(istream& in, Complex& c);//перегрузка оператора >>
};
Complex::Complex(double r, double i) : real(r), img(i) {};
Complex& Complex::operator=(const Complex& right) {
	if (this == &right) {
		return *this;
	}
	real = right.real;
	img = right.img;
	return *this;
};
const Complex& operator++(Complex &left)
{
	left.real++;
	left.img++;
	return left;
};
const Complex& operator--(Complex &left)
{
	left.real--;
	left.img--;
	return left;
};
bool operator==(const Complex &left, const Complex &right)
{
	return left.real == right.real;
};
ostream& operator<<(ostream& out, const Complex& c)
{
	out << c.real << "+" << c.img << "i";
	return out;
};

istream& operator>>(istream& in, Complex& c)
{
	in >> c.real >> c.img;
	return in;
};
int main()
{
	Complex a, b,c;
	int sw = 1;
	cout << "1 - inc, 2 - dec, 3 - compare,  0 - exit" << endl;//выбор
	cin >> sw;
	while (sw != 0)
	{
		switch (sw)
		{
		case 1://инкремент
		{
			cout << "Input a" << endl;
			cin >> a;
			c = ++a;
			cout << c << endl;
		}
		break;
		case 2://декремент 
		{
			cout << "Input a" << endl;
			cin >> a;
			c=--a;
			cout << c << endl;
		}
		break;
		case 3://сравнение
		{
			cout << "Input a,b" << endl;
			cin >> a >> b;
			if (a == b)
				cout << "a=b"<< endl;
			else
				cout << "a!=b"<<endl;
		}
		break;
		case 0://выход из цикла
			break;
		default:
			cout << "Repeat input" << endl;
			break;
		}
		cout << "1 - inc, 2 - dec, 3 - compare,  0 - exit" << endl;//выбор
		cin >> sw;
	}
	system("pause");
	return 0;
}
